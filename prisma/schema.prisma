// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  Int
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  post          Post[]
  comment       Comment[]
  votes         Vote[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Subreddit {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  body        String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  comments    Comment[]
  user        User      @relation(fields: [userId], references: [id])
  votes       Vote[]
  subredditId Int
  userId      String
}

model Comment {
  id     Int    @id @default(autoincrement())
  body   String
  user   User   @relation(fields: [userId], references: [id])
  votes  Vote[]
  post   Post   @relation(fields: [postId], references: [id])
  userId String
  postId Int
}

model Vote {
  id         Int      @id @default(autoincrement())
  isDownvote Boolean
  user       User     @relation(fields: [userId], references: [id])
  post       Post?    @relation(fields: [postId], references: [id])
  comment    Comment? @relation(fields: [commentId], references: [id])
  userId     String
  postId     Int?
  commentId  Int?
}
